--- **************************************************************************************
--- * Selene: Model-checking in concurrent programing using message passing.
--- * Copyright (C) 2016  Adrián Riesco Rodríguez, Gorka Suárez García
--- *
--- * This program is free software: you can redistribute it and/or modify
--- * it under the terms of the GNU General Public License as published by
--- * the Free Software Foundation, either version 3 of the License, or
--- * (at your option) any later version.
--- *
--- * This program is distributed in the hope that it will be useful,
--- * but WITHOUT ANY WARRANTY; without even the implied warranty of
--- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--- * GNU General Public License for more details.
--- *
--- * You should have received a copy of the GNU General Public License
--- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
--- **************************************************************************************

(mod TESTS-WORLD007 is
    pr RUNNER .
    pr TESTS-BASE .

    op w7ifs : -> InputFiles .
    eq w7ifs = makeInputFile(
        "test.erl",
        "-module(test).\n" +
        "\n" +
        "server() ->\n" +
        "    register(server, self()),\n" +
        "    server_loop().\n" +
        "\n" +
        "server_loop() ->\n" +
        "    receive V ->\n" +
        "        print(V, \"\\n\"),\n" +
        "        server_loop(V)\n" +
        "    end.\n" +
        "\n" +
        "worker() ->\n" +
        "    server ! \"EXTERMINATE\",\n" +
        "    server ! \"ANNIHILATE\",\n" +
        "    server ! \"DESTROY\"."
    ).

    op w7prg : -> Expressions .
    eq w7prg =
        @ns(1, 'test,
            @fn(3, 'server,
                @cs(3, nil, nil,
                    @op(4, @call, @lt(4, 'register), @sq(4, @lt(4, 'server)
                        @op(4, @call, @lt(4, 'self), @sq(4, nil))))
                    @op(5, @call, @lt(5, 'server_loop), @sq(5, nil))
                )
            )
            @fn(7, 'server_loop,
                @cs(7, nil, nil,
                    @rc(8, @cs(8, @lt(8, 'V), nil,
                        @op(9, @call, @lt(9, 'print), @sq(9, @lt(9, 'V) @lt(9, "\n")))
                        @op(10, @call, @lt(10, 'server_loop), @sq(10, nil))
                    ), nil)
                )
            )
            @fn(13, 'worker,
                @cs(13, nil, nil,
                    @op(14, @snd,  @lt(14, 'server), @lt(14, "EXTERMINATE"))
                    @op(15, @snd,  @lt(15, 'server), @lt(15, "ANNIHILATE"))
                    @op(16, @snd,  @lt(16, 'server), @lt(16, "DESTROY"))
                )
            )
        ) .

    ops w7scs1 : -> Configuration .
    eq w7scs1 = newStartCall(1, 'test 'server, nil)
                newStartCall(1, 'test 'worker, nil) .

    ops w7s1 w7s5 : -> Configuration .
    eq w7s1  = makeConfigAndStatus('w7c, w7ifs, 1, w7scs1, 'w7s, w7prg) .
    eq w7s5  = makeWorldInit(w7s1) .

endm)
