--- **************************************************************************************
--- * Selene: Model-checking in concurrent programing using message passing.
--- * Copyright (C) 2016  Adrián Riesco Rodríguez, Gorka Suárez García
--- *
--- * This program is free software: you can redistribute it and/or modify
--- * it under the terms of the GNU General Public License as published by
--- * the Free Software Foundation, either version 3 of the License, or
--- * (at your option) any later version.
--- *
--- * This program is distributed in the hope that it will be useful,
--- * but WITHOUT ANY WARRANTY; without even the implied warranty of
--- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--- * GNU General Public License for more details.
--- *
--- * You should have received a copy of the GNU General Public License
--- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
--- **************************************************************************************

---(%
\section{Types}
%)

*** |====================================================================================|
*** | Value                                                                              |
*** |====================================================================================|

---(%
\subsection{fmod TYPES}
    This functional module represents the type of the values.
%)
(fmod TYPES is
    *** |------------------------------------------------------------------------------|
    *** | Imports                                                                      |
    *** |------------------------------------------------------------------------------|

    pr VALUE .
    pr VIEW-TYPES .
    pr SET{String} .

    *** |------------------------------------------------------------------------------|
    *** | Variables                                                                    |
    *** |------------------------------------------------------------------------------|

    vars S1 S2 : String .

    var V  : Value .
    var VS : Values .
    var SS : Set{String} .

    *** |------------------------------------------------------------------------------|
    *** | Types                                                                        |
    *** |------------------------------------------------------------------------------|

    op getType          : Value       -> String .
    op $getListTypes    : Values      -> String .
    op $getTupleTypes   : Values      -> String .
    op $getSetOfTypes   : Values      -> Set{String} .
    op $fromSetToString : Set{String} -> String .

    ceq getType (V) = "symbol"                       if isSymbol(V) .
    ceq getType (V) = "boolean"                      if isBoolean(V) .
    ceq getType (V) = "natural"                      if isNatural(V) .
    ceq getType (V) = "integer"                      if isInteger(V) .
    ceq getType (V) = "float"                        if isFloat(V) .
    ceq getType (V) = "string"                       if isString(V) .
    ceq getType (V) = "[" + $getListTypes(VS)  + "]" if isList(V)  /\ VS := getValues(V) .
    ceq getType (V) = "{" + $getTupleTypes(VS) + "}" if isTuple(V) /\ VS := getValues(V) .
    ceq getType (V) = "pointer"                      if isPointer(V) .
    ceq getType (V) = "error"                        if isError(V) .
    eq  getType (V) = "nothing"                      [owise] .

    eq  $getListTypes (VS) = $fromSetToString($getSetOfTypes(VS)) [owise] .

    ceq $getTupleTypes (V VS) = if S2 == "" then S1 else S1 + "," + S2 fi
                                if S1 := getType(V)
                                /\ S2 := $getTupleTypes(VS) .
    eq  $getTupleTypes (VS)   = "" [owise] .

    eq  $getSetOfTypes (V VS) = getType(V), $getSetOfTypes(VS) .
    eq  $getSetOfTypes (VS)   = empty [owise] .

    eq  $fromSetToString (empty)    = "" .
    ceq $fromSetToString ((S1, SS)) = if S2 == "" then S1 else S1 + "," + S2 fi
                                      if S2 := $fromSetToString(SS) [owise] .

endfm)

