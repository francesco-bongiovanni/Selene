--- **************************************************************************************
--- * Selene: Model-checking in concurrent programing using message passing.
--- * Copyright (C) 2016  Adrián Riesco Rodríguez, Gorka Suárez García
--- *
--- * This program is free software: you can redistribute it and/or modify
--- * it under the terms of the GNU General Public License as published by
--- * the Free Software Foundation, either version 3 of the License, or
--- * (at your option) any later version.
--- *
--- * This program is distributed in the hope that it will be useful,
--- * but WITHOUT ANY WARRANTY; without even the implied warranty of
--- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--- * GNU General Public License for more details.
--- *
--- * You should have received a copy of the GNU General Public License
--- * along with this program.  If not, see <http://www.gnu.org/licenses/>.
--- **************************************************************************************

---(%
\section{Model Checking Properties: Process}
%)

*** |====================================================================================|
*** | MCP Process                                                                        |
*** |====================================================================================|

---(%
\subsection{mod MCP-PROCESS}
    This module represents some model checking properties about processes.
%)
(mod MCP-PROCESS is
    *** |------------------------------------------------------------------------------|
    *** | Imports                                                                      |
    *** |------------------------------------------------------------------------------|

    pr RUNNER .
    pr SATISFACTION .

    *** |------------------------------------------------------------------------------|
    *** | Sorts                                                                        |
    *** |------------------------------------------------------------------------------|

    subsort Configuration < State .

    *** |------------------------------------------------------------------------------|
    *** | Functions                                                                    |
    *** |------------------------------------------------------------------------------|

    op $hasAnyFailed       : Configuration        -> Bool .
    op $hasProcessWithName : Configuration Qid    -> Bool .

    ceq $hasAnyFailed (PO:ProcessObject W:Configuration) =
        true
        if hasTopAnError(PO:ProcessObject) .
    eq $hasAnyFailed (W:Configuration) =
        false [owise] .

    ceq $hasProcessWithName (NO:NodeObject W:Configuration, Q:Qid) =
        true
        if PAO:ProcessAliasObject NXT:Configuration := getInfo(NO:NodeObject)
        /\ getName(PAO:ProcessAliasObject) == Q:Qid .
    eq $hasProcessWithName (W:Configuration, Q:Qid) =
        false [owise] .

    *** |------------------------------------------------------------------------------|
    *** | Properties                                                                   |
    *** |------------------------------------------------------------------------------|

    op ?hasAnyFailed : -> Prop [ctor] .
    eq W:Configuration |= ?hasAnyFailed =
        ($hasAnyFailed(W:Configuration) == true) .

    op ?hasFailed : ProcessObject -> Prop [ctor] .
    eq W:Configuration |= ?hasFailed(PO:ProcessObject) =
        (hasTopAnError(PO:ProcessObject) == true) .

    op ?existsProcess : Qid -> Prop [ctor] .
    eq W:Configuration |= ?existsProcess(Q:Qid) =
        ($hasProcessWithName(W:Configuration, Q:Qid) == true) .

    op ?existsProcess : String -> Prop [ctor] .
    eq W:Configuration |= ?existsProcess(S:String) =
        ($hasProcessWithName(W:Configuration, qid(S:String)) == true) .

endm)
